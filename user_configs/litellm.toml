[app]
provider = "litellm"
# LLM used for internal operations, like deriving conversation names
fast_llm = "openai/lite-triplex"
# LLM used for user-facing output, like RAG replies
quality_llm = "openai/azure-gpt"
# LLM used for ingesting visual inputs
vlm = "openai/gemini-image" # TODO - Replace with viable candidate
# LLM used for transcription
audio_lm = "openai/azure-gpt" # TODO - Replace with viable candidate

[embedding]
provider = "litellm"
base_model = "openai/lite_embedding"
base_dimension = nan
batch_size = 128
add_title_as_prefix = true
concurrent_request_limit = 2

[completion_embedding]
# Generally this should be the same as the embedding config, but advanced users may want to run with a different provider to reduce latency
provider = "litellm"
base_model = "openai/lite_embedding"
base_dimension = nan
batch_size = 128
add_title_as_prefix = true
concurrent_request_limit = 2

[agent]
tools = ["search_file_knowledge"]

[completion]
provider = "litellm"
concurrent_request_limit = 5

  [completion.generation_config]
  temperature = 0.1
  top_p = 1
  max_tokens_to_sample = 1024
  stream = false

[ingestion]
provider = "r2r" # or `unstructured_local` | `unstructured_api`
chunking_strategy = "recursive"
chunk_size = 1024
chunk_overlap = 512


[database]
default_collection_name = "Default"
default_collection_description = "Your default collection."
collection_summary_prompt = "collection_summary"

  [database.graph_creation_settings]
    graph_entity_description_prompt = "graph_entity_description"
    graph_extraction_prompt = "graph_extraction"
    entity_types = [] # if empty, all entities are extracted
    relation_types = [] # if empty, all relations are extracted
    automatic_deduplication = true # enable automatic deduplication of entities

  [database.graph_enrichment_settings]
    graph_communities_prompt = "graph_communities"

